# @file swl/bugs/herbivorous/herbivorous.swl
# Herbivorous bug.
#
# This bug does movements randomly until it detects a element that blocks it.
# If that element is food, the bug eats it. After eating, if it has enough
# energy, the bug creates an egg.
#
#  Copyright (C) 2010-2011  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Initialization
.label init
        loada sp stack                  # Initialize the Stack Pointer

        # Get the initial energy of the bug
        world STD_MYENERGY
        store g1 initial_energy

        # Calculate the energy needed to create a egg: 2 * (energy + size)
        world STD_MYSIZE
        load g0 initial_energy
        add g0 g0 g1
        multi g0 g0 0x2
        store g0 energy_egg

        # Use the actual position of the bug as the seed of the random number
        # generator
        world STD_MYPOSITION
        add g0 g1 g2
        call std_seed

        b main


.include "stdlib/world.swl"
.include "stdlib/random.swl"


# Energy of the bug when it was born
.label initial_energy
.block 0x4

# Energy needed to create a egg
.label energy_egg
.block 0x4


# Main function of the bug
.label main
        .label _main_loop
        call std_random
        modi g0 g0 0x2                  # g0 = std_random % 2

        bz g0 _main_move
        .label _main_turn               # if std_random != 0
        call random_turn
        b _main_loop
        .label _main_move               # else (std_random == 0)
        call random_move

        bnz g0 _main_detect
        b _main_loop

        .label _main_detect             # the bug couldn't move
        call detect
        b _main_loop


# Move forward or backwoard randomly
# OUT: g0 0x0 if there is nothing in front of the bug
#         0x1 if there is something in front of the bug
.label random_move
        # g0 = std_random % 2
        call std_random
        modi g0 g0 0x2

        bz g0 _random_move_forward
        .label _random_move_backward    # if std_random != 0
        world STD_MOVEBACKWARD
        loadi g0 0x0
        ret
        .label _random_move_forward     # else (std_random == 0)
        world STD_MOVEFORWARD
        move g0 g1
        ret


# Turn on the left or on the right randomly
.label random_turn
        # g0 = std_random % 2
        call std_random
        modi g0 g0 0x2

        bz g0 _random_turn_left
        .label _random_turn_right       # if std_random != 0
        world STD_TURNRIGHT
        ret
        .label _random_turn_left        # else (std_random == 0)
        world STD_TURNLEFT
        ret


# Create a egg in front of the bug
.label egg
        load g0 initial_energy
        world STD_EGG

        # let the egg alone
        call random_turn
        call random_move

        ret


# Eat the element that is in front of the bug
.label eat
        world STD_EAT

        world STD_MYENERGY
        load g0 energy_egg
        bgtu g0 g1 _eat_ret

        .label _eat_egg                 # if (MYSELF_ENERGY > ENERGY_TO_CREATE_EGG)
        call egg

        .label _eat_ret                 # else
        ret


# Detect what is in front of the bug and eats it if the element is food
.label detect
        world STD_DETECT                # g1 = ELEMENT

        loadi g0 STD_LFOOD
        bne g1 g0 _detect_ret
        .label _detect_food             # if ELEMENT == FOOD
        call eat

        .label _detect_ret              # else
        ret


# The stack can't be calculate a priori because there are recursive calls
.label stack
.block 0x40                             # 64
