# @file stdlib/jmp.swl
# Non-local jump.
#
#  Copyright (C) 2008-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

.include "stdlib/error.swl"
.include "stdlib/address.swl"

# jmp struct to store the stack context
.define STD_JMP_STRUCT       0xC        # Size of the jmp struct
.define STD_JMP_FP           0x0        # Offset to the frame pointer field
.define STD_JMP_CALLERFP     0x4        # Offset to the caller frame pointer
                                        # field
.define STD_JMP_CALLERPC     0x8        # Offset to the caller program counter
                                        # field


# Destination of a non-local jump.
# IN:  r0 jmp struct
# OUT: r0 value
#      0: returning directly
#      *: returning from std_jmp
# OUT: r1 error status
#      STD_EFAULT: the pointer is not valid
.label std_jmpset
        push r0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi r1 STD_JMP_STRUCT
        call std_address
        bz r0 _std_jmpset_efault

        loadri r0 fp 0x0

        storeri r0 fp STD_JMP_FP

        loadri r1 fp 0xFFF8
        storeri r0 r1 STD_JMP_CALLERFP

        loadri r1 fp 0xFFFC
        storeri r0 r1 STD_JMP_CALLERPC

        loadi r0 0x0
        ret

        .label _std_jmpset_efault
        loadi r1 STD_EFAULT
        ret

# Non-local jump.
# IN:  r0 jmp struct
# IN:  r1 value (it must be greater than 0)
# OUT: r1 error status
#      STD_EINVAL: invalid value
#      STD_EFAULT: the pointer is not valid
.label std_jmp
        # check if the value is correct
        bz r1 _std_jmp_einval

        push r0                         # pointer is in fp + 0x0
        push r1                         # value is in fp + 0x4

        # check if the pointer is valid
        loadi r1 STD_JMP_STRUCT
        call std_address
        bz r0 _std_jmp_efault

        # all the parameters must be restored before the fp is changed
        loadri r0 fp 0x0
        loadri r1 fp 0x4

        loadri fp r0 STD_JMP_FP

        loadri r2 r0 STD_JMP_CALLERFP
        storeri fp r2 0xFFF8

        loadri r2 r0 STD_JMP_CALLERPC
        storeri fp r2 0xFFFC

        move r0 r1
        ret

        .label _std_jmp_einval
        loadi r1 STD_EINVAL
        ret

        .label _std_jmp_efault
        loadi r1 STD_EFAULT
        ret
