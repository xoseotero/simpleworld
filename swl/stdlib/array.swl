# @file stdlib/array.swl
# Array data structure.
# std_init must be executed before using any of this functions.
#
#  Copyright (C) 2008-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/address.swl"
.include "stdlib/alloc.swl"
.include "stdlib/mem.swl"

# Array struct
.define _STD_ARRAY_STRUCT   0x8         # Size of the struct
.define _STD_ARRAY_SIZE     0x0         # Offset to the size field
.define _STD_ARRAY_MEM      0x4         # Offset to the mem field


# Create a new array.
# IN:  g0 number of elements
# OUT: g0 pointer to the array
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_ENOMEM: there is not memory enough
.label std_array
        push g0                         # elements is in fp + 0x0

        # allocate the memory
        multi g0 g0 STD_WORDSIZE
        addi g0 g0 _STD_ARRAY_MEM
        call std_alloc
        bnz g1 _std_array_enomem

        # initialize the fields
        loadri g1 fp 0x0
        storeri g0 g1 _STD_ARRAY_SIZE

        .label _std_array_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_array_enomem
        loadi g1 STD_ENOMEM
        ret

# Free the array.
# IN:  g0 pointer to the array.
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid.
.label std_arrayfree
        call std_free
        ret


# Get the number of elements of the array.
# IN:  g0 number of elements
# OUT: g0 size of the array
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
.label std_arraysize
        push g0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi g1 _STD_ARRAY_STRUCT
        call std_address
        bz g0 _std_arraysize_efault

        # get the size
        loadri g0 fp 0x0
        loadri g0 g0 _STD_ARRAY_SIZE

        .label _std_arraysize_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_arraysize_efault
        loadi g1 STD_EFAULT
        ret

# Resize the array.
# IN:  g0 pointer to the array
# IN:  g1 number of elements
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
#      STD_ENOMEM: there is not memory enough
.label std_arrayresize
        push g0                         # pointer is in fp + 0x0
        push g1                         # elements is in fp + 0x4

        multi g1 g1 STD_WORDSIZE
        addi g1 g1 _STD_ARRAY_MEM
        call std_realloc
        bz g1 _std_arrayresize_ok
        ret

        .label _std_arrayresize_ok
        push g0                         # new is in fp + 0x8

        # update the size
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        storeri g0 g1 _STD_ARRAY_SIZE

        .label _std_arrayresize_ret
        loadri g0 fp 0x8
        loadi g1 STD_NOERROR
        ret


# Get a element of the array.
# IN:  g0 pointer to the array
# IN:  g1 position
# OUT: g0 element
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the position is out of range
#      STD_EFAULT: the pointer is not valid
.label std_arrayget
        push g0                         # pointer is in fp + 0x0
        push g1                         # position is in fp + 0x4

        # check if the pointer is valid
        loadi g1 _STD_ARRAY_STRUCT
        call std_address
        bz g0 _std_arrayget_efault

        # check if the position is valid
        loadri g0 fp 0x0
        loadri g0 g0 _STD_ARRAY_SIZE
        loadri g1 fp 0x4
        bgeu g1 g0 _std_arrayget_einval

        # get the element
        loadri g0 fp 0x0
        addi g0 g0 _STD_ARRAY_MEM
        loadri g1 fp 0x4
        multi g1 g1 STD_WORDSIZE
        loadrr g0 g0 g1

        .label _std_arrayget_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_arrayget_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_arrayget_efault
        loadi g1 STD_EFAULT
        ret

# Set the value of a element of the array.
# IN:  g0 pointer to the array
# IN:  g1 position
# IN:  g2 value
# OUT: g0 element
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the position is out of range
#      STD_EFAULT: the pointer is not valid
.label std_arrayset
        push g0                         # pointer is in fp + 0x0
        push g1                         # position is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the pointer is valid
        loadi g1 _STD_ARRAY_STRUCT
        call std_address
        bz g0 _std_arrayset_efault

        # check if the position is valid
        loadri g0 fp 0x0
        loadri g0 g0 _STD_ARRAY_SIZE
        loadri g1 fp 0x4
        bgeu g1 g0 _std_arrayset_einval

        # set the element
        loadri g0 fp 0x0
        addi g0 g0 _STD_ARRAY_MEM
        loadri g1 fp 0x4
        multi g1 g1 STD_WORDSIZE
        loadri g2 fp 0x8
        storerr g0 g2 g1

        .label _std_arrayset_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_arrayset_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_arrayset_efault
        loadi g1 STD_EFAULT
        ret


# Set the value of all the elements to a value.
# IN:  g0 pointer to the array
# IN:  g1 value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT:  the pointer is not valid
.label std_arrayfill
        push g0                         # pointer is in fp + 0x0
        push g1                         # value is in fp + 0x4

        # check if the pointer is valid
        loadi g1 _STD_ARRAY_STRUCT
        call std_address
        bz g0 _std_arrayfill_efault

        # set the elements
        loadri g0 fp 0x0
        addi g0 g0 _STD_ARRAY_MEM
        loadri g1 fp 0x0
        loadri g1 g1 _STD_ARRAY_SIZE
        multi g1 g1 STD_WORDSIZE
        loadri g2 fp 0x4
        call std_fill
        bz g1 _std_arrayfill_ret
        ret

        .label _std_arrayfill_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_arrayfill_efault
        loadi g1 STD_EFAULT
        ret


# Find a value in a array.
# IN:  g0 pointer to the array
# IN:  g1 start position
# IN:  g2 value
# OUT: g0 poisition of the value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the value was not found
#      STD_EFAULT: the pointer is not valid
.label std_arrayfind
        push g0                         # pointer is in fp + 0x0
        push g1                         # position is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the pointer is valid
        loadi g1 _STD_ARRAY_STRUCT
        call std_address
        bz g0 _std_arrayfind_efault

        # check if the position is valid
        loadri g0 fp 0x0
        loadri g0 g0 _STD_ARRAY_SIZE
        loadri g1 fp 0x4
        bgeu g1 g0 _std_arrayfind_einval

        # search the element
        loadri g0 fp 0x0
        addi g0 g0 _STD_ARRAY_MEM
        loadri g1 fp 0x0
        loadri g1 g1 _STD_ARRAY_SIZE
        loadri g2 fp 0x4
        sub g1 g1 g2
        multi g1 g1 STD_WORDSIZE
        loadri g2 fp 0x8
        call std_find
        bz g1 _std_arrayfind_ret
        ret

        .label _std_arrayfind_ret
        divi g0 g0 STD_WORDSIZE
        loadri g1 fp 0x4
        add g0 g0 g1
        loadi g1 STD_NOERROR
        ret

        .label _std_arrayfind_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_arrayfind_efault
        loadi g1 STD_EFAULT
        ret

# Get the times a value is found in the array.
# IN:  g0 pointer to the array
# IN:  g1 value
# OUT: g0 the times the value was found
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
.label std_arraycount
        push g0                         # pointer is in fp + 0x0
        push g1                         # value is in fp + 0x4

        # check if the pointer is valid
        loadi g1 _STD_ARRAY_STRUCT
        call std_address
        bz g0 _std_arraycount_efault

        # count the elements
        loadri g0 fp 0x0
        addi g0 g0 _STD_ARRAY_MEM
        loadri g1 fp 0x0
        loadri g1 g1 _STD_ARRAY_SIZE
        multi g1 g1 STD_WORDSIZE
        loadri g2 fp 0x4
        call std_count
        bz g1 _std_arraycount_ret
        ret

        .label _std_arraycount_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_arraycount_efault
        loadi g1 STD_EFAULT
        ret
