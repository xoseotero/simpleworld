# @file stdlib/stack.swl
# Stack data structure.
# std_init must be executed before using any of this functions.
#
#  Copyright (C) 2008-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/address.swl"
.include "stdlib/alloc.swl"
.include "stdlib/node.swl"

# Stack struct
.define _STD_STACK_STRUCT     0x4       # Size of the struct
.define _STD_STACK_TOP        0x0       # Offset to the top field


# Create a new stack.
# OUT: g0 pointer to the new stack
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_ENOMEM: there is not memory enough
.label std_stack
        # allocate the memory
        loadi g0 _STD_STACK_STRUCT
        call std_alloc
        bnz g1 _std_stack_enomem

        # initialize the fields
        loadi g1 STD_NULL
        storeri g0 g1 _STD_STACK_TOP

        .label _std_stack_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_stack_enomem
        loadi g1 STD_ENOMEM
        ret

# Free the stack.
# IN:  g0 pointer to the stack.
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid.
.label std_stackfree
        push g0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi g1 _STD_STACK_STRUCT
        call std_address
        bz g0 _std_stackfree_efault

        # free all the nodes
        loadri g0 fp 0x0
        loadri g0 g0 _STD_STACK_TOP
        bz g0 _std_stackfree_free

        .label _std_stackfree_loop
        loadi g1 0x1
        call std_next
        bnz g1 _std_stackfree_free

        # free the node
        push g0
        call std_nodefree
        pop g0
        b _std_stackfree_loop

        .label _std_stackfree_free
        # free the list
        loadri g0 fp 0x0
        call std_free

        .label _std_stackfree_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_stackfree_efault
        loadi g1 STD_EFAULT
        ret


# Check if the stack is empty.
# IN:  g0 pointer to the stack
# OUT: g0 if the queue is empty
#      STD_TRUE: the queue is empty
#      STD_FALSE_ the queue is not empty
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
.label std_stackempty
        push g0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi g1 _STD_STACK_STRUCT
        call std_address
        bz g0 _std_stackempty_efault

        # check if the stack is empty
        loadri g0 fp 0x0
        loadri g0 g0 _STD_STACK_TOP
        bz g0 _std_stackempty_empty
        loadi g0 STD_FALSE
        b _std_stackempty_ret

        .label _std_stackempty_empty
        loadi g0 STD_TRUE

        .label _std_stackempty_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_stackempty_efault
        loadi g1 STD_EFAULT
        ret


# Insert a element in the stack.
# IN:  g0 pointer to the stack
# IN:  g1 value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
#      STD_ENOMEM: there is not memory enough
.label std_stackpush
        push g0                         # pointer is in fp + 0x0
        push g1                         # value is in fp + 0x4

        # check if the pointer is valid
        loadi g1 _STD_STACK_STRUCT
        call std_address
        bz g0 _std_stackpush_efault

        # allocate the new node
        # node.prev = STD_NULL
        # node.next = top
        loadri g0 fp 0x0
        loadri g1 g0 _STD_STACK_TOP
        loadi g0 STD_NULL
        loadri g2 fp 0x4
        call std_node
        bnz g1 _std_stackpush_enomem

        # update the top pointer
        # top = node
        move g1 g0
        loadri g0 fp 0x0
        storeri g0 g1 _STD_STACK_TOP

        .label _std_stackpush_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_stackpush_efault
        loadi g1 STD_EFAULT
        ret

        .label _std_stackpush_enomem
        loadi g1 STD_ENOMEM
        ret

# Remove a element from the stack.
# IN:  g0 pointer to the stack
# OUT: g0 element removed
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the stack is empty
#      STD_EFAULT: the pointer is not valid
.label std_stackpop
        push g0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi g1 _STD_STACK_STRUCT
        call std_address
        bz g0 _std_stackpop_efault

        # check if the stack is empty
        loadri g0 fp 0x0
        loadri g0 g0 _STD_STACK_TOP
        bz g0 _std_stackpop_einval

        # get the node to remove
        loadri g0 fp 0x0
        loadri g0 g0 _STD_STACK_TOP
        push g0                         # removed is in fp + 0x4

        # get the data
        loadri g0 g0 _STD_NODE_DATA
        push g0                         # data is in fp + 0x8

        # update the top node
        # top = removed.next
        loadri g0 fp 0x4
        loadi g1 0x1
        call std_next
        bz g1 _std_stackpop_notempty
        loadi g0 STD_NULL
        .label _std_stackpop_notempty
        loadri g1 fp 0x0
        storeri g1 g0 _STD_STACK_TOP

        # free the node
        loadri g0 fp 0x4
        call std_nodefree

        .label _std_stackpop_ret
        loadri g0 fp 0x8
        loadi g1 STD_NOERROR
        ret

        .label _std_stackpop_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_stackpop_efault
        loadi g1 STD_EFAULT
        ret
