# @file stdlib/int.swl
# Interrupt management.
#
#  Copyright (C) 2008-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/cs.swl"
.include "stdlib/world.swl"
.include "stdlib/bits.swl"
.include "stdlib/address.swl"
.include "stdlib/list.swl"

# Interrupts
.define STD_ITIMER            0x0       # Timer Interrupt
.define STD_ISW               0x1       # Software Interrupt
.define STD_IINST             0x2       # Invalid Instruction
.define STD_IMEM              0x3       # Invalid Memory Location
.define STD_IDIV              0x4       # Division by Zero


# ints (interrupts) struct
.define _STD_INTS_STRUCT      0x1C      # Size of the ints struct
.define _STD_INTS_TIMER       0x00      # Offset to the timer handler
.define _STD_INTS_SW          0x04      # Offset to the software handler
.define _STD_INTS_INST        0x08      # Offset to the instruction handler
.define _STD_INTS_MEM         0x0C      # Offset to the memory handler
.define _STD_INTS_DIV         0x10      # Offset to the division handler
.define _STD_INTS_ACTION      0x14      # Offset to the action handler
.define _STD_INTS_EVENT       0x18      # Offset to the event handler

# Interrupts table
.label _std_itp
.block _STD_INTS_STRUCT


# hnds (handlers) struct (same as ints)
.define _STD_HNDS_STRUCT      _STD_INTS_STRUCT
.define _STD_HNDS_TIMER       _STD_INTS_TIMER
.define _STD_HNDS_SW          _STD_INTS_SW
.define _STD_HNDS_INST        _STD_INTS_INST
.define _STD_HNDS_MEM         _STD_INTS_MEM
.define _STD_HNDS_DIV         _STD_INTS_DIV
.define _STD_HNDS_ACTION      _STD_INTS_ACTION
.define _STD_HNDS_EVENT       _STD_INTS_EVENT

# Handlers tables
.label _std_hnds
.block _STD_HNDS_STRUCT


# Check that the interrupt is valid.
# IN:  r0 interrupt
# OUT: r0 if the interrupt is valid
#      STD_TRUE:  is valid
#      STD_FALSE: is not valid
.label _std_interrupt
        loadi r1 STD_IEVENT
        bgtu r0 r1 _std_interrupt_invalid

        .label _std_interrupt_ok
        loadi r0 STD_TRUE
        ret

        .label _std_interrupt_invalid
        loadi r0 STD_FALSE
        ret


# (Internal) handler of a interrupt.
# IN:  r0 type of interrupt
# IN:  r1 first parameter
# IN:  r2 second parameter
.label _std_handler
        push r0                         # type is in fp + 0x0
        push r1                         # first is in fp + 0x4
        push r2                         # second is in fp + 0x8

        # check if the interrupt is valid
        call _std_interrupt
        bz r0 __std_handler_ret

        # calculate the pointer to the list of handlers
        loada r0 _std_hnds
        loadri r1 fp 0x0
        multli r1 r1 STD_WORDSIZE
        add r0 r0 r1
        loadri r0 r0 0x0
        push r0                         # list is in fp + 0xC

        # save the position of the handler executed
        loadi r0 0x0
        push r0                         # position is in fp + 0x10

        # execute all the interrupts
        .label __std_handler_loop
        # get the handler
        loadri r0 fp 0x0C
        loadri r1 fp 0x10
        call std_listget
        bnz r1 __std_handler_ret
        move r3 r0

        # call the handler
        loadri r0 fp 0x0
        loadri r1 fp 0x4
        loadri r2 fp 0x8
        callr r3

        # update the position
        loadri r0 fp 0x10
        addi r0 r0 0x1
        storeri fp r0 0x10

        b __std_handler_loop

        .label __std_handler_ret
        reti


# Initialize the interrupts manager.
# It should not be called directly but by std_init.
# IN:   r0 maximum number of interrupts that can be handled
# OUT:  r1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: number of interrupts too bit (more than 15)
#      STD_ENOMEM: there is not enough memory
.label _std_intinit
        push r0                         # number is in fp + 0x0

        # check the number of interrupts
        loadi r1 STD_CSINTMAX
        call std_bitsclear
        bnz r0 __std_intinit_einval

        # initialize the interrupts
        loadi r0 STD_ITIMER
        loadi r1 STD_IEVENT
        loada r2 _std_itp
        loada r3 _std_handler

        .label __std_intinit_loop1
        # set the internal handler
        multli r4 r0 STD_WORDSIZE
        storerr r2 r3 r4

        # update the start
        addi r0 r0 0x1
        bleu r0 r1 __std_intinit_loop1

        # initialize the handlers
        # reset the start
        loadi r0 STD_ITIMER

        push r0                         # start is in fp + 0x4
        push r1                         # end is in fp + 0x8

        .label __std_intinit_loop2
        # initialize the handler
        call std_list
        bnz r1 __std_intinit_enomem
        loada r1 _std_hnds
        loadri r2 fp 0x4
        multli r3 r2 STD_WORDSIZE
        storerr r1 r0 r3

        # update the start
        addi r2 r2 0x1
        storeri fp r2 0x4
        loadri r0 fp 0x8
        bleu r2 r0 __std_intinit_loop2

        # set the itp
        move r0 cs
        loadi r1 0x0000
        loadhi r1 0xFFFF
        call std_bitsclear
        loada r1 _std_itp
        slli r1 r1 0x10
        call std_bitsset
        move cs r0

        # set the maximum number of interrupts
        loadi r1 STD_CSINTMAX
        call std_bitsclear
        loadri r1 fp 0x0
        call std_bitsset
        move cs r0

        .label __std_intinit_ok
        loadi r1 STD_NOERROR
        ret

        .label __std_intinit_einval
        loadi r1 STD_EINVAL
        ret

        .label __std_intinit_enomem
        loadi r1 STD_ENOMEM
        ret


# Enable the interrupts.
.label std_enable
        move r0 cs
        loadi r1 STD_CSENABLE
        call std_bitsset
        move cs r0
        ret

# Disable the interrupts.
.label std_disable
        move r0 cs
        loadi r1 STD_CSENABLE
        call std_bitsclear
        move cs r0
        ret


# Add a handler to a interrupt.
# The handler must be a normal function but not a real interrupt handler, ie
# the handler should use ret but not reti. The parameters passed to the
# handler are the same as passed to a real interrupt handler.
# IN:  r0 interrupt
# IN:  r1 handler
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  the interrupt is not valid
#      STD_EFAULT:  the handler is not valid
#      STD_ENOMEM:  there is not enough memory
.label std_handler
        push r0                         # interrupt is in fp + 0x0
        push r1                         # handler is in fp + 0x4

        # check if the interrupt is valid
        call _std_interrupt
        bz r0 _std_handler_einval

        # check if the handler is valid
        loadri r0 fp 0x4
        loadi r1 STD_WORDSIZE
        call std_address
        bz r0 _std_handler_efault

        # calculate the pointer to the list
        loada r0 _std_hnds
        loadri r1 fp 0x0
        multli r1 r1 STD_WORDSIZE
        add r0 r0 r1
        loadri r0 r0 0x0
        push r0                         # list is in fp + 0x8

        # calculate the size of the list
        call std_listsize
        bnz r1 _std_handler_efault
        move r1 r0                      # size is in r1

        # add the handler to the end of interrupt handlers
        # restore the parameters
        loadri r0 fp 0x8
        loadri r2 fp 0x4
        call std_listinsert
        bz r1 _std_handler_ok
        ret                             # return the same error as
                                        # std_listinsert

        .label _std_handler_ok
        loadi r1 STD_NOERROR
        ret

        .label _std_handler_einval
        loadi r1 STD_EINVAL
        ret

        .label _std_handler_efault
        loadi r1 STD_EFAULT
        ret

# Remove a handler from a interrupt.
# IN:  r0 interrupt
# IN:  r1 handler
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  the interrupt is not valid or the handler was not found
#      STD_EFAULT:  the handler is not valid
.label std_rmhandler
        push r0                         # interrupt is in fp + 0x0
        push r1                         # handler is in fp + 0x4

        # check if the interrupt is valid
        call _std_interrupt
        bz r0 _std_rmhandler_einval

        # check if the handler is valid
        loadri r0 fp 0x4
        loadi r1 STD_WORDSIZE
        call std_address
        bz r0 _std_rmhandler_efault

        # calculate the pointer to the list
        loada r0 _std_hnds
        loadri r1 fp 0x0
        multli r1 r1 STD_WORDSIZE
        add r0 r0 r1
        loadri r0 r0 0x0
        push r0                         # list is in fp + 0x8

        # search the handler in the list
        loadi r1 0x0
        call std_listfind
        bnz r1 _std_rmhandler_einval
        move r1 r0                      # position is in r1

        # remove the handler from the interrupt handlers
        loadri r0 fp 0x8
        call std_listremove
        bz r1 _std_rmhandler_ok
        ret                             # return the same error as
                                        # std_listinsert

        .label _std_rmhandler_ok
        loadi r1 STD_NOERROR
        ret

        .label _std_rmhandler_einval
        loadi r1 STD_EINVAL
        ret

        .label _std_rmhandler_efault
        loadi r1 STD_EFAULT
        ret
