# @file stdlib/int.swl
# Interrupt management.
#
#  Copyright (C) 2008-2011  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/world.swl"
.include "stdlib/address.swl"
.include "stdlib/list/list.swl"
.include "stdlib/list/size.swl"
.include "stdlib/list/get.swl"
.include "stdlib/list/insert.swl"
.include "stdlib/list/remove.swl"
.include "stdlib/list/find.swl"


# Interrupts
.define STD_ITIMER            0x0       # Timer Interrupt
.define STD_ISW               0x1       # Software Interrupt
.define STD_IINST             0x2       # Invalid Instruction
.define STD_IMEM              0x3       # Invalid Memory Location
.define STD_IDIV              0x4       # Division by Zero


# ints (interrupts) struct
.define _STD_INTS_STRUCT      0x1C      # Size of the ints struct
.define _STD_INTS_TIMER       0x00      # Offset to the timer handler
.define _STD_INTS_SW          0x04      # Offset to the software handler
.define _STD_INTS_INST        0x08      # Offset to the instruction handler
.define _STD_INTS_MEM         0x0C      # Offset to the memory handler
.define _STD_INTS_DIV         0x10      # Offset to the division handler
.define _STD_INTS_ACTION      0x14      # Offset to the action handler
.define _STD_INTS_EVENT       0x18      # Offset to the event handler

# Interrupts table
.label _std_itp
.block _STD_INTS_STRUCT


# hnds (handlers) struct (same as ints)
.define _STD_HNDS_STRUCT      _STD_INTS_STRUCT
.define _STD_HNDS_TIMER       _STD_INTS_TIMER
.define _STD_HNDS_SW          _STD_INTS_SW
.define _STD_HNDS_INST        _STD_INTS_INST
.define _STD_HNDS_MEM         _STD_INTS_MEM
.define _STD_HNDS_DIV         _STD_INTS_DIV
.define _STD_HNDS_ACTION      _STD_INTS_ACTION
.define _STD_HNDS_EVENT       _STD_INTS_EVENT

# Handlers tables
.label _std_hnds
.block _STD_HNDS_STRUCT


# Check that the interrupt is valid.
# IN:  g0 interrupt
# OUT: g0 if the interrupt is valid
#      STD_TRUE:  is valid
#      STD_FALSE: is not valid
.label _std_interrupt
        loadi g1 STD_IEVENT
        bgtu g0 g1 _std_interrupt_invalid

        .label _std_interrupt_ok
        loadi g0 STD_TRUE
        ret

        .label _std_interrupt_invalid
        loadi g0 STD_FALSE
        ret


# (Internal) handler of a interrupt.
# IN:  g0 type of interrupt
# IN:  g1 first parameter
# IN:  g2 second parameter
.label _std_handler
        move r0 g0                      # type
        move r1 g1                      # first
        move r2 g2                      # second

        # check if the interrupt is valid
        call _std_interrupt
        bz g0 __std_handler_ret

        # calculate the pointer to the list of handlers
        loada g0 _std_hnds
        multi g1 r0 STD_WORDSIZE
        add g0 g0 g1
        loadri r3 g0 0x0                # list

        # save the position of the handler executed
        loadi r4 0x0                    # position

        # execute all the interrupts
        .label __std_handler_loop
        # get the handler
        move g0 r3
        move g1 r4
        call std_listget
        bnz g1 __std_handler_ret
        move g3 g0

        # call the handler
        move g0 r0
        move g1 r1
        move g2 r2
        callr g3

        # update the position
        addi r4 r4 0x1

        b __std_handler_loop

        .label __std_handler_ret
        reti


# Initialize the interrupts manager.
# It should not be called directly but by std_init.
# OUT:  g1 error status
#      STD_NOERROR: no errors
#      STD_ENOMEM: there is not enough memory
.label _std_intinit
        move r0 g0                      # number

        # initialize the interrupts
        loadi g0 STD_ITIMER
        loadi r1 STD_IEVENT             # end
        loada r2 _std_itp               # _std_itp
        loada g1 _std_handler

        .label __std_intinit_loop1
        # set the internal handler
        multi r0 g0 STD_WORDSIZE
        storerr r2 g1 r0

        # update the start
        addi g0 g0 0x1
        bleu g0 r1 __std_intinit_loop1

        # initialize the handlers
        # reset the start
        loadi r3 STD_ITIMER             # start

        .label __std_intinit_loop2
        # initialize the handler
        call std_list
        bnz g1 __std_intinit_enomem
        loada g1 _std_hnds
        multi g3 r3 STD_WORDSIZE
        storerr g1 g0 g3

        # update the start
        addi r3 r3 0x1
        bleu r3 r1 __std_intinit_loop2

        # set the ip
        move ip r2

        .label __std_intinit_ok
        loadi g1 STD_NOERROR
        ret

        .label __std_intinit_enomem
        loadi g1 STD_ENOMEM
        ret


# Enable the interrupts.
.label std_enable
        loada ip _std_itp
        ret

# Disable the interrupts.
.label std_disable
        loadi ip 0x0
        ret


# Add a handler to a interrupt.
# The handler must be a normal function but not a real interrupt handler, ie
# the handler should use ret but not reti. The parameters passed to the
# handler are the same as passed to a real interrupt handler.
# IN:  g0 interrupt
# IN:  g1 handler
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  the interrupt is not valid
#      STD_EFAULT:  the handler is not valid
#      STD_ENOMEM:  there is not enough memory
.label std_handler
        move r0 g0                      # interrupt
        move r1 g1                      # handler

        # check if the interrupt is valid
        call _std_interrupt
        bz g0 _std_handler_einval

        # check if the handler is valid
        move g0 r1
        loadi g1 STD_WORDSIZE
        call std_address
        bz g0 _std_handler_efault

        # calculate the pointer to the list
        loada g0 _std_hnds
        multi g1 r0 STD_WORDSIZE
        add g0 g0 g1
        loadri r2 g0 0x0                # list

        # calculate the size of the list
        move g0 r2
        call std_listsize
        bnz g1 _std_handler_efault
        move g1 g0                      # size is in g1

        # add the handler to the end of interrupt handlers
        # restore the parameters
        move g0 r2
        move g2 r1
        call std_listinsert
        ret                             # return the same error as
                                        # std_listinsert

        .label _std_handler_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_handler_efault
        loadi g1 STD_EFAULT
        ret

# Remove a handler from a interrupt.
# IN:  g0 interrupt
# IN:  g1 handler
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  the interrupt is not valid or the handler was not found
#      STD_EFAULT:  the handler is not valid
.label std_rmhandler
        move r0 g0                      # interrupt
        move r1 g1                      # handler

        # check if the interrupt is valid
        call _std_interrupt
        bz g0 _std_rmhandler_einval

        # check if the handler is valid
        move g0 r1
        loadi g1 STD_WORDSIZE
        call std_address
        bz g0 _std_rmhandler_efault

        # calculate the pointer to the list
        loada g0 _std_hnds
        multi g1 r0 STD_WORDSIZE
        add g0 g0 g1
        loadri r2 g0 0x0                # list

        # search the handler in the list
        move g0 r2
        loadi g1 0x0
        call std_listfind
        bnz g1 _std_rmhandler_einval
        move g1 g0                      # position is in g1

        # remove the handler from the interrupt handlers
        move g0 r2
        call std_listremove
        ret                             # return the same error as
                                        # std_listinsert

        .label _std_rmhandler_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_rmhandler_efault
        loadi g1 STD_EFAULT
        ret
