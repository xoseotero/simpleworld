# @file stdlib/list.swl
# List data structure.
# std_init must be executed before using any of this functions.
#
#  Copyright (C) 2008-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/address.swl"
.include "stdlib/alloc.swl"
.include "stdlib/node.swl"

# List struct
.define _STD_LIST_STRUCT  0x8           # Size of the struct
.define _STD_LIST_FIRST   0x0           # Offset to the first field
.define _STD_LIST_SIZE    0x4           # Offset to the size field


# Create a new list.
# OUT: g0 pointer to the new list
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_ENOMEM: there is not memory enough
.label std_list
        # allocate the memory
        loadi g0 _STD_LIST_STRUCT
        call std_alloc
        bnz g1 _std_list_enomem

        # initialize the fields
        loadi g1 STD_NULL
        storeri g0 g1 _STD_LIST_FIRST

        loadi g1 0x0
        storeri g0 g1 _STD_LIST_SIZE

        .label _std_list_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_list_enomem
        loadi g1 STD_ENOMEM
        ret

# Free the list.
# IN:  g0 pointer to the list.
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid.
.label std_listfree
        push g0               # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listfree_efault

        # free all the nodes
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_FIRST
        bz g0 _std_listfree_free

        .label _std_listfree_loop
        loadi g1 0x1
        call std_next
        bnz g1 _std_listfree_free

        # free the node
        push g0
        call std_nodefree
        pop g0
        b _std_listfree_loop

        .label _std_listfree_free
        # free the list
        loadri g0 fp 0x0
        call std_free

        .label _std_listfree_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_listfree_efault
        loadi g1 STD_EFAULT
        ret


# Get the number of elements of the list.
# IN:  g0 pointer to the list
# OUT: g0 size of the list
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
.label std_listsize
        # save the parameters in the stack
        push g0               # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listsize_efault

        # restore the parameters
        loadri g0 fp 0x0

        # get the size
        loadri g0 g0 _STD_LIST_SIZE

        .label _std_listsize_ret
        loadi g1 STD_NOERROR
        ret

        .label _std_listsize_efault
        loadi g1 STD_EFAULT
        ret


# Get a element of the list.
# IN:  g0 pointer to the list
# IN:  g1 position
# OUT: g0 element
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the position is out of range
#      STD_EFAULT: the pointer is not valid
.label std_listget
        push g0               # pointer is in fp + 0x0
        push g1               # position is in fp + 0x4

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listget_efault

        # check if the position is valid
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_SIZE
        loadri g1 fp 0x4
        bgeu g1 g0 _std_listget_einval

        # get the element
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_FIRST
        loadri g1 fp 0x4
        call std_next

        # if std_next returns a error return it
        bz g1 _std_listget_ret
        ret

        .label _std_listget_ret
        loadri g0 g0 _STD_NODE_DATA
        loadi g1 STD_NOERROR
        ret

        .label _std_listget_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_listget_efault
        loadi g1 STD_EFAULT
        ret


# Insert a element in the list.
# IN:  g0 pointer to the list
# IN:  g1 position
# IN:  g2 value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the position is out of range
#      STD_EFAULT: the pointer is not valid
#      STD_ENOMEM: there is not memory enough
.label std_listinsert
        push g0               # pointer is in fp + 0x0
        push g1               # position is in fp + 0x4
        push g2               # value is in fp + 0x8

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listinsert_efault

        # check if the position is valid
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_SIZE
        loadri g1 fp 0x4
        bgtu g1 g0 _std_listinsert_einval

        # check if the insert is at the beginning
        bz g1 _std_listinsert_beginning

        # insert in a position different than the beginning
        # calculate the previous node
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_FIRST
        loadri g1 fp 0x4
        subi g1 g1 0x1
        call std_next
        bnz g1 _std_listinsert_efault
        push g0               # previous is in fp + 0xC

        # allocate the new node
        # node.prev = previous
        # node.next = previous.next
        loadri g0 g0 _STD_NODE_NEXT
        move g1 g0
        loadri g0 fp 0xC
        loadri g2 fp 0x8
        call std_node
        push g0               # new is in fp + 0x10
        bnz g1 _std_listinsert_enomem

        # update the previous node
        # previous.next = node
        loadri g0 fp 0xC
        loadri g1 fp 0x10
        storeri g0 g1 _STD_NODE_NEXT

        # update the next node
        # next.prev = node
        loadri g0 g1 _STD_NODE_NEXT
        bz g0 _std_listinsert_ret

        storeri g0 g1 _STD_NODE_PREV

        b _std_listinsert_ret

        # insert at the beginning
        .label _std_listinsert_beginning

        # allocate the new node
        # node.prev = STD_NULL
        # node.next = first
        loadri g0 fp 0x0
        loadri g1 g0 _STD_LIST_FIRST
        loadi g0 STD_NULL
        loadri g2 fp 0x8
        call std_node
        bnz g1 _std_listinsert_enomem

        # update the first pointer
        # first = node
        move g1 g0
        loadri g0 fp 0x0
        storeri g0 g1 _STD_LIST_FIRST

        # update the next node
        # next.prev = node
        loadri g0 g1 _STD_NODE_NEXT
        bz g0 _std_listinsert_ret

        storeri g0 g1 _STD_NODE_PREV

        .label _std_listinsert_ret
        # update the size
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_SIZE
        addi g1 g0 0x1
        loadri g0 fp 0x0
        storeri g0 g1 _STD_LIST_SIZE

        loadi g1 STD_NOERROR
        ret

        .label _std_listinsert_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_listinsert_efault
        loadi g1 STD_EFAULT
        ret

        .label _std_listinsert_enomem
        loadi g1 STD_ENOMEM
        ret

# Remove a element from the list.
# IN:  g0 pointer to the list
# IN:  g1 position
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the position is out of range
#      STD_EFAULT: the pointer is not valid
.label std_listremove
        push g0               # pointer is in fp + 0x0
        push g1               # position is in fp + 0x4

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listremove_efault

        # check if the position is valid
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_SIZE
        loadri g1 fp 0x4
        bgeu g1 g0 _std_listremove_einval

        # calculate the node to remove
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_FIRST
        loadri g1 fp 0x4
        call std_next
        bnz g1 _std_listremove_efault
        push g0               # removed is in fp + 0x8

        # update the previous node
        # previous.next = removed.next
        # only if the the removed node is not the first one
        loadri g0 fp 0x4
        bz g0 _std_listremove_next

        loadri g0 fp 0x8
        loadi g1 0x1
        call std_prev
        bnz g1 _std_listremove_efault
        loadri g1 fp 0x8
        loadri g1 g1 _STD_NODE_NEXT
        storeri g0 g1 _STD_NODE_NEXT

        # update the next node
        # next.prev = removed.prev
        .label _std_listremove_next
        # only if the removed node is not the last one
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_SIZE
        subi g0 g0 0x1
        loadri g1 fp 0x4
        beq g0 g1 _std_listremove_first

        loadri g0 fp 0x8
        loadi g1 0x1
        call std_next
        bnz g1 _std_listremove_efault
        loadri g1 fp 0x8
        loadri g1 g1 _STD_NODE_PREV
        storeri g0 g1 _STD_NODE_PREV

        # update the first node
        # first = removed.next
        .label _std_listremove_first
        # only if the remove node is the first one
        loadri g0 fp 0x4
        bnz g0 _std_listremove_free

        loadri g0 fp 0x8
        loadi g1 0x1
        call std_next
        bnz g1 _std_listremove_efault
        loadri g1 fp 0x0
        storeri g1 g0 _STD_LIST_FIRST

        # free the node
        .label _std_listremove_free
        loadri g0 fp 0x8
        call std_nodefree

        .label _std_listremove_ret
        # update the size
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_SIZE
        subi g1 g0 0x1
        loadri g0 fp 0x0
        storeri g0 g1 _STD_LIST_SIZE

        loadi g1 STD_NOERROR
        ret

        .label _std_listremove_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_listremove_efault
        loadi g1 STD_EFAULT
        ret


# Find a value in the list.
# IN:  g0 pointer to the list
# IN:  g1 start position
# IN:  g2 value
# OUT: g0 position
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the value was not found
#      STD_EFAULT: the pointer is not valid
.label std_listfind
        push g0               # pointer is in fp + 0x0
        push g1               # position is in fp + 0x4
        push g2               # value is in fp + 0x8

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listfind_efault

        # check if the size is 0
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_SIZE
        bz g0 _std_listfind_einval

        # check if the position is valid
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_SIZE
        loadri g1 fp 0x4
        bgeu g1 g0 _std_listfind_einval

        push g0               # size is in fp + 0xC

        # search the value
        # start the search in the position
        loadri g0 fp 0x0
        loadri g0 g0 _STD_LIST_FIRST
        loadri g1 fp 0x4
        call std_next
        bnz g1 _std_listfind_efault

        .label _std_listfind_loop
        # compare the value
        loadri g1 g0 _STD_NODE_DATA
        loadri g2 fp 0x8
        beq g1 g2 _std_listfind_ret

        # update the position
        loadri g1 fp 0x4
        addi g1 g1 0x1
        storeri fp g1 0x4
        # check if there are more nodes
        loadri g2 fp 0xC
        beq g1 g2 _std_listfind_einval

        # go to the next node
        loadi g1 0x1
        call std_next
        bnz g1 _std_listfind_efault

        b _std_listfind_loop


        .label _std_listfind_ret
        loadri g0 fp 0x4
        loadi g1 STD_NOERROR
        ret

        .label _std_listfind_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_listfind_efault
        loadi g1 STD_EFAULT
        ret


# Get the times a value is found in the list.
# IN:  g0 pointer to the list
# IN:  g1 value
# OUT: g0 the times the value was found
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
.label std_listcount
        push g0               # pointer is in fp + 0x0
        push g1               # value is in fp + 0x4

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listcount_efault

        # check if the size is 0
        loadri g0 fp 0x0
        loadri g1 g0 _STD_LIST_SIZE
        bz g1 _std_listcount_empty

        push g1               # size is in fp + 0x8

        loadi g1 0x0
        push g1               # counter is in fp + 0xC

        loadri g0 g0 _STD_LIST_FIRST

        # count the times the value is found
        .label _std_listcount_loop
        # compare the value
        loadri g1 g0 _STD_NODE_DATA
        loadri g2 fp 0x4
        bne g1 g2 _std_listcount_continue
        # update the counter
        loadri g1 fp 0xC
        addi g1 g1 0x1
        storeri fp g1 0xC

        .label _std_listcount_continue
        # update the size
        loadri g1 fp 0x8
        subi g1 g1 0x1
        storeri fp g1 0x8
        # check if there are more nodes
        bz g1 _std_listcount_ret

        # go to the next node
        loadi g1 0x1
        call std_next
        bnz g1 _std_listcount_efault

        b _std_listcount_loop


        .label _std_listcount_ret
        loadri g0 fp 0xC
        loadi g1 STD_NOERROR
        ret

        .label _std_listcount_empty
        loadi g0 0x0
        loadi g1 STD_NOERROR
        ret

        .label _std_listcount_efault
        loadi g1 STD_EFAULT
        ret
