# @file stdlib/random.swl
# Pseudorandom number generator.
#
#  Copyright (C) 2007-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Linear Congruential Generator (LCG)
# http://en.wikipedia.org/wiki/Linear_congruential_generator
# The GNU libc LCG algorithm is used: Vi = (A * V(i-1) + B) & C

.include "stdlib/def.swl"
.include "stdlib/bits.swl"


# Constants for calculate next random value
.label _std_random_a
0x41c64e6d
.label _std_random_b
0x3039
.label _std_random_c
STD_MAX

# Seed zero by default
.label _std_random_seed1
STD_ZERO
.label _std_random_seed2
STD_FULL


# Set the seed.
# IN:  r0 the seed
.label std_seed
        push r0                         # seed is in fp + 0x0

        # the second word of the seed is the complement of the first one
        call std_bitscomp

        pop r1

        store r0 _std_random_seed1
        store r1 _std_random_seed2

        ret



# Update the seed with a iteration of the LCG algorithm
# IN:  r0 the seed
# OUT: r0 the new value of the seed
.label _std_random_lcg
        load r1 _std_random_a
        load r2 _std_random_b
        load r3 _std_random_c

        # LCG in the seed
        mult r0 r0 r1
        add r0 r0 r2
        and r0 r0 r3

        ret



# Calculate a new random value.
# OUT: r0 the random value
.label std_random
        # LCG in the two seeds
        load r0 _std_random_seed1
        call _std_random_lcg
        push r0

        load r0 _std_random_seed2
        call _std_random_lcg

        # seed1 in r1
        # seed2 in r0
        pop r1

        # Update seeds
        store r1 _std_random_seed1
        store r0 _std_random_seed2

        # Calculate the new word using the most value bits of the words
        # (the LCG algorith only returns 31 bits, the MLB = 0)
        srli r1 r1 0x0f
        slli r1 r1 0x10
        srli r0 r0 0x0f
        or r0 r0 r1

        ret
