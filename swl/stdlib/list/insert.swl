# @file stdlib/list/insert.swl
# Insert a element in the list.
#
#  Copyright (C) 2008-2011  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/address/address.swl"
.include "stdlib/node/def.swl"
.include "stdlib/node/node.swl"
.include "stdlib/node/next.swl"
.include "stdlib/list/def.swl"


# Insert a element in the list.
# IN:  g0 pointer to the list
# IN:  g1 position
# IN:  g2 value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the position is out of range
#      STD_EFAULT: the pointer is not valid
#      STD_ENOMEM: there is not memory enough
.label std_listinsert
        move r0 g0                      # pointer
        move r1 g1                      # position
        move r2 g2                      # value

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listinsert_efault

        # check if the position is valid
        loadri g0 r0 _STD_LIST_SIZE
        bgtu r1 g0 _std_listinsert_einval

        # check if the insert is at the beginning
        bz r1 _std_listinsert_beginning

        # insert in a position different than the beginning
        # calculate the previous node
        loadri g0 r0 _STD_LIST_FIRST
        subi g1 r1 0x1
        call std_next
        bnz g1 _std_listinsert_efault
        move r3 g0                      # previous

        # allocate the new node
        # node.prev = previous
        # node.next = previous.next
        loadri g1 g0 _STD_NODE_NEXT
        move g0 r3
        move g2 r2
        call std_node
        move r4 g0                      # new
        bnz g1 _std_listinsert_enomem

        # update the previous node
        # previous.next = node
        storeri r3 r4 _STD_NODE_NEXT

        # update the next node
        # next.prev = node
        loadri g0 r4 _STD_NODE_NEXT
        bz g0 _std_listinsert_ret

        storeri g0 r4 _STD_NODE_PREV

        b _std_listinsert_ret

        # insert at the beginning
        .label _std_listinsert_beginning

        # allocate the new node
        # node.prev = STD_NULL
        # node.next = first
        loadi g0 STD_NULL
        loadri g1 r0 _STD_LIST_FIRST
        move g2 r2
        call std_node
        bnz g1 _std_listinsert_enomem

        # update the first pointer
        # first = node
        storeri r0 g0 _STD_LIST_FIRST

        # update the next node
        # next.prev = node
        loadri g1 g0 _STD_NODE_NEXT
        bz g1 _std_listinsert_ret

        storeri g1 g0 _STD_NODE_PREV

        .label _std_listinsert_ret
        # update the size
        loadri g0 r0 _STD_LIST_SIZE
        addi g0 g0 0x1
        storeri r0 g0 _STD_LIST_SIZE

        loadi g1 STD_NOERROR
        ret

        .label _std_listinsert_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_listinsert_efault
        loadi g1 STD_EFAULT
        ret

        .label _std_listinsert_enomem
        loadi g1 STD_ENOMEM
        ret
