# @file stdlib/list/find.swl
# Find a value in the list.
#
#  Copyright (C) 2008-2011  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


.include "stdlib/error.swl"
.include "stdlib/address/address.swl"
.include "stdlib/node/def.swl"
.include "stdlib/node/next.swl"
.include "stdlib/list/def.swl"


# Find a value in the list.
# IN:  g0 pointer to the list
# IN:  g1 start position
# IN:  g2 value
# OUT: g0 position
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the value was not found
#      STD_EFAULT: the pointer is not valid
.label std_listfind
        move r0 g0                      # pointer
        move r1 g1                      # position
        move r2 g2                      # value

        # check if the pointer is valid
        loadi g1 _STD_LIST_STRUCT
        call std_address
        bz g0 _std_listfind_efault

        # check if the size is 0
        loadri g0 r0 _STD_LIST_SIZE
        bz g0 _std_listfind_einval

        # check if the position is valid
        loadri r3 r0 _STD_LIST_SIZE     # size
        bgeu r1 r3 _std_listfind_einval

        # search the value
        # start the search in the position
        loadri g0 r0 _STD_LIST_FIRST
        move g1 r1
        call std_next
        bnz g1 _std_listfind_efault

        # use g0 as the node in all the loop
        .label _std_listfind_loop
        # compare the value
        loadri g1 g0 _STD_NODE_DATA
        beq g1 r2 _std_listfind_ret

        # update the position
        addi r1 r1 0x1
        # check if there are more nodes
        beq r1 r3 _std_listfind_einval

        # go to the next node
        loadi g1 0x1
        call std_next
        bnz g1 _std_listfind_efault

        b _std_listfind_loop


        .label _std_listfind_ret
        move g0 r1
        loadi g1 STD_NOERROR
        ret

        .label _std_listfind_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_listfind_efault
        loadi g1 STD_EFAULT
        ret
