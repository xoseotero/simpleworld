# @file stdlib/memory.swl
# Operations over the memory.
#
# begin:     Wed, 22 Nov 2006 20:03:28 +0100
# last:      $Date$
#
#  Copyright (C) 2006-2007  Xos√© Otero <xoseotero@users.sourceforge.net>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Fill memory with a constant word.
# IN:  r0 pointer to the memory block
# IN:  r1 value to copy
# IN:  r2 number of words.
.label memory_set
	loadi r3 0x0
	# r4 is used as the register offset
	loadi r4 0x0

	.label _memory_set_loop
	beq r2 r3 _memory_set_end	# while r2 != 0

	# do the copy
	storerr r0 r4 r1

	# update the number of words to copy and the offset
	subi r2 r2 0x1
	addi r4 r4 0x4

	b _memory_set_loop

	.label _memory_set_end		# r2 == 0
	ret


# Copy a block of memory.
# IN:  r0 pointer to src memory block
# IN:  r1 pointer to dst memory block
# IN:  r2 words to copy
.label memory_copy
	loadi r3 0x0
	# r4 is used as the register offset
	loadi r4 0x0

	.label _memory_copy_loop
	beq r2 r3 _memory_copy_end	# while r2 != 0

	# do the copy
	loadrr r5 r0 r4
	storerr r1 r4 r5

	# update the number of words to copy and the offset
	subi r2 r2 0x1
	addi r4 r4 0x4

	b _memory_copy_loop

	.label _memory_copy_end		# r2 == 0
	ret


# Concatenate src block memory to dst.
# IN:  r0 pointer to src memory block
# IN:  r1 pointer to dst memory block
# IN:  r2 words of the src memory block
# IN:  r3 words of the dst memory block
.label memory_cat
	# memory_cat is as a memory_copy but adding r3 to r1
	add r1 r1 r3
	call memory_copy
	ret


# Compare two blocks of memory.
# IN:  r0 pointer to first memory block
# IN:  r1 pointer to second memory block
# IN:  r2 words to compare
# OUT: r0 < 0 if first < second
#         = 0 if first == second
#         > 0 if first > second
.label memory_cmp
	loadi r3 0x0
	# r4 is used as the register offset
	loadi r4 0x0

	.label _memory_cmp_loop
	beq r2 r3 _memory_cmp_equal	# while r2 != 0

	# do the comparation
	loadrr r5 r0 r4
	loadrr r6 r1 r4

	bne r5 r6 _memory_cmp_diff	# if mem[r0 + r4] == mem[r1 + r4]

	# update the number of words to copy and the offset
	subi r2 r2 0x1
	addi r4 r4 0x4

	b _memory_cmp_loop

	.label _memory_cmp_equal	# r2 == 0
	loadi r0 0x0
	ret

	.label _memory_cmp_diff		# else (mem[r0 + r4] != mem[r1 + r4])
	sub r0 r5 r6
	ret
