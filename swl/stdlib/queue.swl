# @file stdlib/queue.swl
# Queue data structure.
# std_init must be executed before using any of this functions.
#
#  Copyright (C) 2008-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/address.swl"
.include "stdlib/alloc.swl"
.include "stdlib/node.swl"

# Queue struct
.define _STD_QUEUE_STRUCT     0x8       # Size of the struct
.define _STD_QUEUE_TOP        0x0       # Offset to the top field
.define _STD_QUEUE_BOTTOM     0x4       # Offset to the bottom field


# Create a new queue.
# OUT: r0 pointer to the new queue
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_ENOMEM: there is not memory enough
.label std_queue
        # allocate the memory
        loadi r0 _STD_QUEUE_STRUCT
        call std_alloc
        bnz r1 _std_queue_enomem

        # initialize the fields
        loadi r1 STD_NULL
        storeri r0 r1 _STD_QUEUE_TOP
        storeri r0 r1 _STD_QUEUE_BOTTOM

        .label _std_queue_ret
        loadi r1 STD_NOERROR
        ret

        .label _std_queue_enomem
        loadi r1 STD_ENOMEM
        ret

# Free the queue.
# IN:  r0 pointer to the queue.
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid.
.label std_queuefree
        push r0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi r1 _STD_QUEUE_STRUCT
        call std_address
        bz r0 _std_queuefree_efault

        # free all the nodes
        loadri r0 fp 0x0
        loadri r0 r0 _STD_QUEUE_TOP
        bz r0 _std_queuefree_free

        .label _std_queuefree_loop
        loadi r1 0x1
        call std_next
        bnz r1 _std_queuefree_free

        # free the node
        push r0
        call std_nodefree
        pop r0
        b _std_queuefree_loop

        .label _std_queuefree_free
        # free the list
        loadri r0 fp 0x0
        call std_free

        .label _std_queuefree_ret
        loadi r1 STD_NOERROR
        ret

        .label _std_queuefree_efault
        loadi r1 STD_EFAULT
        ret


# Check if the queue is empty.
# IN:  r0 pointer to the queue
# OUT: r0 if the queue is empty
#      STD_TRUE: the queue is empty
#      STD_FALSE_ the queue is not empty
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
.label std_queueempty
        push r0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi r1 _STD_QUEUE_STRUCT
        call std_address
        bz r0 _std_queueempty_efault

        # check if the stack is empty
        loadri r0 fp 0x0
        loadri r0 r0 _STD_QUEUE_TOP
        bz r0 _std_queueempty_empty
        loadi r0 STD_FALSE
        b _std_queueempty_ret

        .label _std_queueempty_empty
        loadi r0 STD_TRUE

        .label _std_queueempty_ret
        loadi r1 STD_NOERROR
        ret

        .label _std_queueempty_efault
        loadi r1 STD_EFAULT
        ret


# Insert a element in the queue.
# IN:  r0 pointer to the queue
# IN:  r1 value
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
#      STD_ENOMEM: there is not memory enough
.label std_queuepush
        push r0                         # pointer is in fp + 0x0
        push r1                         # value is in fp + 0x4

        # check if the pointer is valid
        loadi r1 _STD_QUEUE_STRUCT
        call std_address
        bz r0 _std_queuepush_efault

        # allocate the new node
        # node.prev = STD_NULL
        # node.next = STD_NULL
        loadi r0 STD_NULL
        loadi r1 STD_NULL
        loadri r2 fp 0x4
        call std_node
        bnz r1 _std_queuepush_enomem
        push r0                         # node is in fp + 0x8

        # check if the queue is empty
        loadri r0 fp 0x0
        loadri r1 r0 _STD_QUEUE_TOP
        bz r1 _std_queuepush_empty

        # update the previous node
        # previous.next = node
        loadri r0 fp 0x8
        storeri r1 r0 _STD_NODE_NEXT
        b _std_queuepush_top

        .label _std_queuepush_empty
        # update the bottom pointer
        # bottom = node
        loadri r1 fp 0x8
        storeri r0 r1 _STD_QUEUE_BOTTOM

        .label _std_queuepush_top
        # update the top pointer
        # top = node
        loadri r0 fp 0x0
        loadri r1 fp 0x8
        storeri r0 r1 _STD_QUEUE_TOP

        .label _std_queuepush_ret
        loadi r1 STD_NOERROR
        ret

        .label _std_queuepush_efault
        loadi r1 STD_EFAULT
        ret

        .label _std_queuepush_enomem
        loadi r1 STD_ENOMEM
        ret

# Remove a element from the queue.
# IN:  r0 pointer to the queue
# OUT: r0 element removed
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: the queue is empty
#      STD_EFAULT: the pointer is not valid
.label std_queuepop
        push r0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi r1 _STD_QUEUE_STRUCT
        call std_address
        bz r0 _std_queuepop_efault

        # check if the queue is empty
        loadri r0 fp 0x0
        loadri r0 r0 _STD_QUEUE_TOP
        bz r0 _std_queuepop_einval

        # get the node to remove
        loadri r0 fp 0x0
        loadri r0 r0 _STD_QUEUE_BOTTOM
        push r0                         # removed is in fp + 0x4

        # get the data
        loadri r0 r0 _STD_NODE_DATA
        push r0                         # data is in fp + 0x8

        # update the bottom pointer
        loadri r0 fp 0x0
        loadri r1 fp 0x4
        loadri r1 r1 _STD_NODE_NEXT
        storeri r0 r1 _STD_QUEUE_BOTTOM

        # check if the queue is empty
        loadri r0 fp 0x0
        loadri r1 r0 _STD_QUEUE_BOTTOM
        bnz r1 _std_queuepop_free

        # update the top node
        # top = NULL
        .label _std_queuepop_empty
        loadri r0 fp 0x0
        loadi r1 STD_NULL
        storeri r0 r1 _STD_QUEUE_TOP

        # free the node
        .label _std_queuepop_free
        loadri r0 fp 0x4
        call std_nodefree

        .label _std_queuepop_ret
        loadri r0 fp 0x8
        loadi r1 STD_NOERROR
        ret

        .label _std_queuepop_einval
        loadi r1 STD_EINVAL
        ret

        .label _std_queuepop_efault
        loadi r1 STD_EFAULT
        ret
