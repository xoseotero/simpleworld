# @file stdlib/mem.swl
# Operations over the memory.
#
#  Copyright (C) 2008-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/address.swl"

# Set all the words of a block of memory to a value.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid
#      STD_EFAULT:  the pointer is not valid
.label std_fill
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_fill_einval
        modi g3 g1 STD_WORDSIZE
        bnz g3 _std_fill_einval

        # check if the block is valid
        call std_address
        bz g0 _std_fill_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # set all the block to the value
        .label _std_fill_loop
        subi g1 g1 STD_WORDSIZE
        storerr g0 g2 g1
        bnz g1 _std_fill_loop

        .label _std_fill_ok
        loadi g1 STD_NOERROR
        ret

        .label _std_fill_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_fill_efault
        loadi g1 STD_EFAULT
        ret

# Set all the half words of a block of memory to a value.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid
#      STD_EFAULT:  the pointer is not valid
.label std_fillh
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_fillh_einval
        modi g3 g1 STD_HWORDSIZE
        bnz g3 _std_fillh_einval

        # check if the block is valid
        call std_address
        bz g0 _std_fillh_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # set all the block to the value
        .label _std_fillh_loop
        subi g1 g1 STD_HWORDSIZE
        storehrr g0 g2 g1
        bnz g1 _std_fillh_loop

        .label _std_fillh_ok
        loadi g1 STD_NOERROR
        ret

        .label _std_fillh_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_fillh_efault
        loadi g1 STD_EFAULT
        ret

# Set all the quarter words of a block of memory to a value.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid
#      STD_EFAULT:  the pointer is not valid
.label std_fillq
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_fillq_einval

        # check if the block is valid
        call std_address
        bz g0 _std_fillq_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # set all the block to the value
        .label _std_fillq_loop
        subi g1 g1 STD_QWORDSIZE
        storeqrr g0 g2 g1
        bnz g1 _std_fillq_loop

        .label _std_fillq_ok
        loadi g1 STD_NOERROR
        ret

        .label _std_fillq_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_fillq_efault
        loadi g1 STD_EFAULT
        ret


# Copy a block of memory (quarter word by quarter word).
# IN:  g0 destination pointer
# IN:  g1 source pointer
# IN:  g2 size of the block of memory
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid
#      STD_EFAULT:  the pointers are not valid
.label std_copy
        push g0                         # dst is in fp + 0x0
        push g1                         # src is in fp + 0x4
        push g2                         # size is in fp + 0x8

        # check if the size is valid
        bz g1 _std_copy_einval

        # check if the dst block is valid
        move g1 g2
        call std_address
        bz g0 _std_copy_efault

        # check if the src block is valid
        loadri g0 fp 0x4
        loadri g1 fp 0x8
        call std_address
        bz g0 _std_copy_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # copy the block
        .label _std_copy_loop
        subi g2 g2 STD_QWORDSIZE
        loadqrr g3 g1 g2
        storeqrr g0 g3 g2
        bnz g2 _std_copy_loop

        .label _std_copy_ok
        loadi g1 STD_NOERROR
        ret

        .label _std_copy_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_copy_efault
        loadi g1 STD_EFAULT
        ret


# Compare two blocks of memory (quarter word by quarter word).
# IN:  g0 pointeg1
# IN:  g1 pointeg2
# IN:  g2 size of the block of memory
# OUT: g0 difference
#      < 0: pointeg1 < pointeg2
#      = 0: pointeg1 = pointeg2
#      > 0: pointeg1 > pointeg2
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT:  the pointers are not valid
.label std_cmp
        push g0                         # pt1 is in fp + 0x0
        push g1                         # pt2 is in fp + 0x4
        push g2                         # size is in fp + 0x8

        # check if the size is valid
        bz g2 _std_cmp_einval

        # check if the first block is valid
        move g1 g2
        call std_address
        bz g0 _std_cmp_efault

        # check if the second block is valid
        loadri g0 fp 0x4
        loadri g1 fp 0x8
        call std_address
        bz g0 _std_cmp_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # compare the block
        loadi g3 0x0

        .label _std_cmp_loop
        loadqrr r0 g0 g3
        loadqrr r1 g1 g3
        sub r2 r0 r1
        bnz r2 _std_cmp_notequal

        addi g3 g3 STD_QWORDSIZE
        bne g2 g3 _std_cmp_loop

        .label _std_cmp_equal
        loadi g0 0x0
        loadi g1 STD_NOERROR
        ret

        .label _std_cmp_notequal
        move g0 r2                      # r2 is the difference
        loadi g1 STD_NOERROR
        ret

        .label _std_cmp_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_cmp_efault
        loadi g1 STD_EFAULT
        ret


# Find a word in a block of memory.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g0 offset of the value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid or the value was not found
#      STD_EFAULT:  the pointer is not valid
.label std_find
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_find_einval
        modi g3 g1 STD_WORDSIZE
        bnz g3 _std_find_einval

        # check if the block is valid
        call std_address
        bz g0 _std_find_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # find the value
        loadi g3 0x0

        .label _std_find_loop
        loadrr r0 g0 g3
        beq g2 r0 _std_find_found

        addi g3 g3 STD_WORDSIZE
        bne g1 g3 _std_find_loop

        .label _std_find_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_find_found
        move g0 g3                      # g3 is the offset of the element
        loadi g1 STD_NOERROR
        ret

        .label _std_find_efault
        loadi g1 STD_EFAULT
        ret

# Find a half word in a block of memory.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g0 offset of the value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid or the value was not found
#      STD_EFAULT:  the pointer is not valid
.label std_findh
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_findh_einval
        modi g3 g1 STD_HWORDSIZE
        bnz g3 _std_findh_einval

        # check if the block is valid
        call std_address
        bz g0 _std_findh_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # find the value
        loadi g3 0x0

        .label _std_findh_loop
        loadhrr r0 g0 g3
        beq g2 r0 _std_findh_found

        addi g3 g3 STD_HWORDSIZE
        bne g1 g3 _std_findh_loop

        .label _std_findh_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_findh_found
        move g0 g3                      # g3 is the offset of the element
        loadi g1 STD_NOERROR
        ret

        .label _std_findh_efault
        loadi g1 STD_EFAULT
        ret

# Find a quarter word in a block of memory.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g0 offset of the value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid or the value was not found
#      STD_EFAULT:  the pointer is not valid
.label std_findq
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_findq_einval

        # check if the block is valid
        call std_address
        bz g0 _std_findq_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # find the value
        loadi g3 0x0

        .label _std_findq_loop
        loadqrr r0 g0 g3
        beq g2 r0 _std_findq_found

        addi g3 g3 STD_QWORDSIZE
        bne g1 g3 _std_findq_loop

        .label _std_findq_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_findq_found
        move g0 g3                      # g3 is the offset of the element
        loadi g1 STD_NOERROR
        ret

        .label _std_findq_efault
        loadi g1 STD_EFAULT
        ret


# Count the times that a word is found in a block of memory.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g0 number of elements found
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid
#      STD_EFAULT:  the pointer is not valid
.label std_count
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_count_einval
        modi g3 g1 STD_WORDSIZE
        bnz g3 _std_count_einval

        # check if the block is valid
        call std_address
        bz g0 _std_count_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # count the values
        loadi g3 0x0
        loadi r0 0x0                    # counter

        .label _std_count_loop
        loadrr r1 g0 g3
        bne g2 r1 _std_count_notequal
        addi r0 r0 0x1                  # element found

        .label _std_count_notequal
        addi g3 g3 STD_WORDSIZE
        bne g1 g3 _std_count_loop

        .label _std_count_ok
        move g0 r0
        loadi g1 STD_NOERROR
        ret

        .label _std_count_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_count_efault
        loadi g1 STD_EFAULT
        ret

# Count the times that a word is found in a block of memory.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g0 number of elements found
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid
#      STD_EFAULT:  the pointer is not valid
.label std_counth
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_counth_einval
        modi g3 g1 STD_HWORDSIZE
        bnz g3 _std_counth_einval

        # check if the block is valid
        call std_address
        bz g0 _std_counth_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # count the values
        loadi g3 0x0
        loadi r0 0x0                    # counter

        .label _std_counth_loop
        loadhrr r1 g0 g3
        bne g2 r1 _std_counth_notequal
        addi r0 r0 0x1                  # element found

        .label _std_counth_notequal
        addi g3 g3 STD_HWORDSIZE
        bne g1 g3 _std_counth_loop

        .label _std_counth_ok
        move g0 r0
        loadi g1 STD_NOERROR
        ret

        .label _std_counth_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_counth_efault
        loadi g1 STD_EFAULT
        ret

# Count the times that a word is found in a block of memory.
# IN:  g0 pointer
# IN:  g1 size of the block of memory
# IN:  g2 value
# OUT: g0 number of elements found
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is not valid
#      STD_EFAULT:  the pointer is not valid
.label std_countq
        push g0                         # pointer is in fp + 0x0
        push g1                         # size is in fp + 0x4
        push g2                         # value is in fp + 0x8

        # check if the size is valid
        bz g1 _std_countq_einval

        # check if the block is valid
        call std_address
        bz g0 _std_countq_efault

        # restore the parameters
        loadri g0 fp 0x0
        loadri g1 fp 0x4
        loadri g2 fp 0x8

        # count the values
        loadi g3 0x0
        loadi r0 0x0                    # counter

        .label _std_countq_loop
        loadqrr r1 g0 g3
        bne g2 r1 _std_countq_notequal
        addi r0 r0 0x1                  # element found

        .label _std_countq_notequal
        addi g3 g3 STD_QWORDSIZE
        bne g1 g3 _std_countq_loop

        .label _std_countq_ok
        move g0 r0
        loadi g1 STD_NOERROR
        ret

        .label _std_countq_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_countq_efault
        loadi g1 STD_EFAULT
        ret
