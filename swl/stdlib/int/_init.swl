# @file stdlib/int/_init.swl
# Initialize the interrupts manager.
#
#  Copyright (C) 2008-2011  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/world.swl"
.include "stdlib/list/list.swl"
.include "stdlib/list/get.swl"
.include "stdlib/int/_itp.swl"
.include "stdlib/int/_hnds.swl"
.include "stdlib/int/_interrupt.swl"


# (Internal) handler of a interrupt.
# IN:  g0 type of interrupt
# IN:  g1 first parameter
# IN:  g2 second parameter
.label _std_handler
        move r0 g0                      # type
        move r1 g1                      # first
        move r2 g2                      # second

        # check if the interrupt is valid
        call _std_interrupt
        bz g0 __std_handler_ret

        # calculate the pointer to the list of handlers
        loada g0 _std_hnds
        multi g1 r0 STD_WORDSIZE
        add g0 g0 g1
        loadri r3 g0 0x0                # list

        # save the position of the handler executed
        loadi r4 0x0                    # position

        # execute all the interrupts
        .label __std_handler_loop
        # get the handler
        move g0 r3
        move g1 r4
        call std_listget
        bnz g1 __std_handler_ret
        move g3 g0

        # call the handler
        move g0 r0
        move g1 r1
        move g2 r2
        callr g3

        # update the position
        addi r4 r4 0x1

        b __std_handler_loop

        .label __std_handler_ret
        reti


# Initialize the interrupts manager.
# It should not be called directly but by std_init.
# OUT:  g1 error status
#      STD_NOERROR: no errors
#      STD_ENOMEM: there is not enough memory
.label _std_intinit
        move r0 g0                      # number

        # initialize the interrupts
        loadi g0 STD_ITIMER
        loadi r1 STD_IEVENT             # end
        loada r2 _std_itp               # _std_itp
        loada g1 _std_handler

        .label __std_intinit_loop1
        # set the internal handler
        multi r0 g0 STD_WORDSIZE
        storerr r2 g1 r0

        # update the start
        addi g0 g0 0x1
        bleu g0 r1 __std_intinit_loop1

        # initialize the handlers
        # reset the start
        loadi r3 STD_ITIMER             # start

        .label __std_intinit_loop2
        # initialize the handler
        call std_list
        bnz g1 __std_intinit_enomem
        loada g1 _std_hnds
        multi g3 r3 STD_WORDSIZE
        storerr g1 g0 g3

        # update the start
        addi r3 r3 0x1
        bleu r3 r1 __std_intinit_loop2

        # set the ip
        move ip r2

        .label __std_intinit_ok
        loadi g1 STD_NOERROR
        ret

        .label __std_intinit_enomem
        loadi g1 STD_ENOMEM
        ret
