# @file stdlib/string.swl
# String operations.
# Strings are a array of ASCII characters ending with a 0 value.
#
# begin:     Wed, 22 Nov 2006 03:18:47 +0100
# last:      $Date$ by $Author$
#
#  Copyright (C) 2006, 2007, Xos√© Otero <xoseotero@users.sourceforge.net>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

.include "stdlib/chars.swl"

# Return the lenght of the string
# IN:  r0 pointer to string
# OUT: r0 the lenght
.label string_len
	loadi r1 0x0			# r1 = 0
	loadi r2 CHAR_END		# r2 = '\0'

	.label string_len_cmp
	loadrr r3 r0 r1			# r3 = MEM[r0 + r1]
	beq r3 r2 string_len_ret	# if r3 == '\0' goto string_len_ret
	addi r1 r1 0x1			# r1 = r1 + 1
	b string_len_cmp		# goto string_len_cmp

	.label string_len_ret
	move r0 r1			# r0 = r1
	ret
# End of .label string_len


# Copy one string in other
# IN:  r0 pointer to src string
# IN:  r1 pointer to dst string
.label string_copy

# Append src string to dst
# IN:  r0 pointer to src string
# IN:  r1 pointer to dst string
.label string_cat

# Compare two strings
# IN:  r0 pointer to first string
# IN:  r1 pointer to second string
# OUT: r0 < 0 if first < second
#         = 0 if first == second
#         > 0 if first > second
.label string_cmp

# Find the first apparition of a substring in a string
# IN:  r0 pointer to the string
# IN:  r1 pointer to the substring
# OUT: first position of the match if found substring
#      string_len(string) if not found substring
.label string_find

# Find the last apparition of a substring in a string
# IN:  r0 pointer to the string
# IN:  r1 pointer to the substring
# OUT: first position of the match if found substring
#      string_len(string) if not found substring
.label string_endfind

# Split a string separated by a substring
# IN:  r0 pointer to the string
# IN:  r1 pointer to the substring
# IN:  r3 division returned
# IN:  r4 pointer to where save the result
.label string_split
