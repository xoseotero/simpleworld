# @file stdlib/node/vafter.swl
# Create a variable size node after other one.
#
#  Copyright (C) 2012  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


.include "stdlib/error.swl"
.include "stdlib/address/address.swl"
.include "stdlib/mem/copy.swl"
.include "stdlib/alloc/alloc.swl"
.include "stdlib/alloc/free.swl"
.include "stdlib/node/def.swl"


# Create a variable size node after other one.
# IN:  g0 next node.
# IN:  g1 pointer.
# IN:  g2 size.
# OUT: g0 pointer to the new node.
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL:  size is 0
#      STD_EFAULT:  the pointers are not valid
#      STD_ENOMEM:  there is not memory enough
.label std_vnodeafter
        # check if the size is 0
        bz g1 _std_vnodeafter_einval

        move r0 g0                      # prev
        move r1 g1                      # pointer
        move r2 g2                      # size

        loadi g1 STD_VNODE_STRUCT
        call std_address
        bz g0 __std_vnodeafter_efault

        loadri r3 r0 _STD_NODE_NEXT     # next

        # allocate the memory
        addi g0 r2 STD_VNODE_STRUCT
        call std_alloc
        bnz g1 _std_vnodeafter_enomem
        move r4 g0                      # node

        # set the fields
        addi g0 g0 STD_NODE_DATA
        move g1 r1
        move g2 r2
        call std_copy
        bnz g1 _std_vnodeafter_copyerror

        .label _std_vnodeafter_continue
        storeri r4 r0 _STD_NODE_PREV
        storeri r4 r3 _STD_NODE_NEXT

        # update the next node
        bz r3 _std_vnodeafter_prev
        storeri r3 r4 _STD_NODE_PREV

        # update the previous node
        .label _std_vnodeafter_prev
        storeri r0 r4 _STD_NODE_NEXT

        .label _std_vnodeafter_ret
        move g0 r4
        loadi g1 STD_NOERROR
        ret

        .label _std_vnodeafter_einval
        loadi g1 STD_EINVAL
        ret

        .label _std_vnodeafter_efault
        loadi g1 STD_EFAULT
        ret

        .label _std_vnodeafter_enomem
        loadi g1 STD_ENOMEM
        ret

        .label _std_vnodeafter_copyerror
        # save the error returned by std_copy
        move r5 g1

        # free the node
        move g0 r4
        call std_free

        move g1 r5
        ret
