# @file stdlib/node.swl
# Node data structure used for stacks, queues, sets and lists.
# std_init must be executed before using any of this functions.
#
#  Copyright (C) 2008-2010  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/address.swl"
.include "stdlib/alloc.swl"

# Node struct
.define _STD_NODE_STRUCT      0xC       # Size of the struct
.define _STD_NODE_PREV        0x0       # Offset to the prev field
.define _STD_NODE_NEXT        0x4       # Offset to the next field
.define _STD_NODE_DATA        0x8       # Offset to the data field


# Create a new node.
# IN:  r0 pointer to the previous node.
# IN:  r1 pointer to the next node.
# IN:  r2 data.
# OUT: r0 pointer to the new node.
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_ENOMEM: there is not memory enough
.label std_node
        push r0                         # prev is in fp + 0x0
        push r1                         # next is in fp + 0x4
        push r2                         # data is in fp + 0x8

        # allocate the memory
        loadi r0 _STD_NODE_STRUCT
        call std_alloc
        bnz r1 _std_node_enomem

        # set the fields
        loadri r1 fp 0x0
        storeri r0 r1 _STD_NODE_PREV

        loadri r1 fp 0x4
        storeri r0 r1 _STD_NODE_NEXT

        loadri r1 fp 0x8
        storeri r0 r1 _STD_NODE_DATA

        .label _std_node_ret
        loadi r1 STD_NOERROR
        ret

        .label _std_node_enomem
        loadi r1 STD_ENOMEM
        ret

# Free the node.
# IN:  r0 pointer to the node.
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid.
.label std_nodefree
        call std_free
        ret


# Go to the previous nodes.
# IN:  r0 pointer to the node.
# IN:  r1 nodes to follow.
# OUT: r0 pointer to the node.
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: there are not enough nodes
#      STD_EFAULT: the pointer is not valid.
.label std_prev
        push r0                         # pointer is in fp + 0x0
        push r1                         # nodes is in fp + 0x4

        # check if the pointer is valid
        loadi r1 _STD_NODE_STRUCT
        call std_address
        bz r0 _std_prev_efault

        # go to the node selected
        .label _std_prev_loop
        # check if this is the desired node
        loadri r1 fp 0x4
        bz r1 _std_prev_ret

        # update the counter
        subi r1 r1 0x1
        storeri fp r1 0x4

        # calculate the previous node
        loadri r0 fp 0x0
        loadri r0 r0 _STD_NODE_PREV
        storeri fp r0 0x0

        # check if the pointer is valid
        loadi r1 _STD_NODE_STRUCT
        call std_address
        bz r0 _std_prev_einval

        b _std_prev_loop

        .label _std_prev_ret
        loadri r0 fp 0x0
        loadi r1 STD_NOERROR
        ret

        .label _std_prev_einval
        loadi r1 STD_EINVAL
        ret

        .label _std_prev_efault
        loadi r1 STD_EFAULT
        ret

# Go to the next nodes.
# IN:  r0 pointer to the node.
# IN:  r1 nodes to follow.
# OUT: r0 pointer to the node.
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EINVAL: there are not enough nodes
#      STD_EFAULT: the pointer is not valid.
.label std_next
        push r0                         # pointer is in fp + 0x0
        push r1                         # nodes is in fp + 0x4

        # check if the pointer is valid
        loadi r1 _STD_NODE_STRUCT
        call std_address
        bz r0 _std_next_efault

        # go to the node selected
        .label _std_next_loop
        # check if this is the desired node
        loadri r1 fp 0x4
        bz r1 _std_next_ret

        # update the counter
        subi r1 r1 0x1
        storeri fp r1 0x4

        # calculate the next node
        loadri r0 fp 0x0
        loadri r0 r0 _STD_NODE_NEXT
        storeri fp r0 0x0

        # check if the pointer is valid
        loadi r1 _STD_NODE_STRUCT
        call std_address
        bz r0 _std_next_einval

        b _std_next_loop

        .label _std_next_ret
        loadri r0 fp 0x0
        loadi r1 STD_NOERROR
        ret

        .label _std_next_einval
        loadi r1 STD_EINVAL
        ret

        .label _std_next_efault
        loadi r1 STD_EFAULT
        ret


# Go to the first node.
# A infinite loop is created if there are loops in the nodes.
# IN:  r0 pointer to the node.
# OUT: r0 pointer to the first node.
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid.
.label std_first
        push r0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi r1 _STD_NODE_STRUCT
        call std_address
        bz r0 _std_first_efault

        # go to the first node
        .label _std_first_loop
        # calculate the previous node
        loadri r0 fp 0x0
        loadri r0 r0 _STD_NODE_PREV

        # check if it is the first node
        bz r0 _std_first_ret

        # update the node
        storeri fp r0 0x0

        # check if the pointer is valid
        loadi r1 _STD_NODE_STRUCT
        call std_address
        bz r0 _std_first_efault

        b _std_first_loop

        .label _std_first_ret
        loadri r0 fp 0x0
        loadi r1 STD_NOERROR
        ret

        .label _std_first_efault
        loadi r1 STD_EFAULT
        ret

# Go to the last node.
# A infinite loop is created if there are loops in the nodes.
# IN:  r0 pointer to the node.
# OUT: r0 pointer to the last node.
# OUT: r1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid.
.label std_last
        push r0                         # pointer is in fp + 0x0

        # check if the pointer is valid
        loadi r1 _STD_NODE_STRUCT
        call std_address
        bz r0 _std_last_efault

        # go to the last node
        .label _std_last_loop
        # calculate the next node
        loadri r0 fp 0x0
        loadri r0 r0 _STD_NODE_NEXT

        # check if it is the last node
        bz r0 _std_first_ret

        # update the node
        storeri fp r0 0x0

        # check if the pointer is valid
        loadi r1 _STD_NODE_STRUCT
        call std_address
        bz r0 _std_last_ret

        b _std_last_loop

        .label _std_last_ret
        loadri r0 fp 0x0
        loadi r1 STD_NOERROR
        ret

        .label _std_last_efault
        loadi r1 STD_EFAULT
        ret
