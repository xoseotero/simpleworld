# @file stdlib/queue/push.swl
# Insert a element in the queue.
#
#  Copyright (C) 2008-2012  Xos√© Otero <xoseotero@gmail.com>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


.include "stdlib/def.swl"
.include "stdlib/error.swl"
.include "stdlib/address/address.swl"
.include "stdlib/node/node.swl"
.include "stdlib/node/after.swl"
.include "stdlib/queue/def.swl"


# Insert a element in the queue.
# IN:  g0 pointer to the queue
# IN:  g1 value
# OUT: g1 error status
#      STD_NOERROR: no errors
#      STD_EFAULT: the pointer is not valid
#      STD_ENOMEM: there is not memory enough
.label std_queuepush
        move r0 g0                      # pointer
        move r1 g1                      # value

        # check if the pointer is valid
        loadi g1 STD_QUEUE_STRUCT
        call std_address
        bz g0 _std_queuepush_efault

        # check if the queue is empty
        loadri g0 r0 _STD_QUEUE_BOTTOM
        bz g0 _std_queuepush_empty

        # the queue is not empty
        .label _std_queuepush_notempty
        move g1 r1
        call std_nodeafter
        bnz g1 _std_queuepush_enomem
        b _std_queuepush_ret

        # the queue is empty
        .label _std_queuepush_empty
        loadi g0 STD_NULL
        loadi g1 STD_NULL
        move g2 r1
        call std_node
        bnz g1 _std_queuepush_enomem

        # update bottom
        storeri r0 g0 _STD_QUEUE_BOTTOM

        .label _std_queuepush_ret
        # update top
        storeri r0 g0 _STD_QUEUE_TOP

        loadi g1 STD_NOERROR
        ret

        .label _std_queuepush_efault
        loadi g1 STD_EFAULT
        ret

        .label _std_queuepush_enomem
        loadi g1 STD_ENOMEM
        ret
