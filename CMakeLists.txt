PROJECT(SimpleWorld)
INCLUDE_DIRECTORIES(.)
SUBDIRS(sqlite3 sqlite3x xyssl
  simple world cpu db src tests)
LINK_DIRECTORIES(cpu)


INCLUDE(${CMAKE_ROOT}/Modules/TestForANSIStreamHeaders.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/TestForSTDNamespace.cmake)
INCLUDE(${CMAKE_ROOT}/Modules/CheckIncludeFileCXX.cmake)

# include specific modules
set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")


# Boost is needed
FIND_PACKAGE(Boost REQUIRED)
IF(NOT Boost_FOUND)
  MESSAGE(FATAL_ERROR "Boost not found")
ENDIF(NOT Boost_FOUND)

SET(CMAKE_REQUIRED_INCLUDES "${Boost_INCLUDE_DIRS}")
# Boost Filesystem Library is needed
CHECK_INCLUDE_FILE_CXX("boost/filesystem/path.hpp" HAVE_BOOST_PATH)
IF(NOT HAVE_BOOST_PATH)
  MESSAGE(FATAL_ERROR "Boost Filesystem Library not found")
ENDIF(NOT HAVE_BOOST_PATH)

# Boost Regular Expressions Library is needed
CHECK_INCLUDE_FILE_CXX("boost/regex.hpp" HAVE_BOOST_REGEX)
IF(NOT HAVE_BOOST_REGEX)
  MESSAGE(FATAL_ERROR "Boost Regular Expressions Library not found")
ENDIF(NOT HAVE_BOOST_REGEX)

IF(SW_TEST)
  # Boost Unit Test Frameword is needed
  CHECK_INCLUDE_FILE_CXX("boost/test/unit_test.hpp" HAVE_BOOST_UTF)
  IF(NOT HAVE_BOOST_UTF)
    MESSAGE(FATAL_ERROR "Boost Unit Test Framework not found")
  ENDIF(NOT HAVE_BOOST_UTF)
ENDIF(SW_TEST)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

# SQLite3
OPTION(SQLite3_USE_INTERNAL "Use internal SQLite3 library" OFF)

IF(NOT SQLite3_USE_INTERNAL)
  FIND_PACKAGE(SQLite3)
ENDIF(NOT SQLite3_USE_INTERNAL)

IF(NOT SQLite3_FOUND OR SQLite3_USE_INTERNAL)
  SET(SQLite3_USE_INTERNAL 1)
  MESSAGE("Internal SQLite3 library will be used")
  SET(SQLite3_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/sqlite3")
  SET(SQLite3_LIBRARIES "sqlite3")
ELSE(NOT SQLite3_FOUND OR SQLite3_USE_INTERNAL)
  SET(SQLite3_USE_INTERNAL 0)
ENDIF(NOT SQLite3_FOUND OR SQLite3_USE_INTERNAL)

INCLUDE_DIRECTORIES(${SQLite3_INCLUDE_DIRS})

# SQLite3x
OPTION(SQLite3x_USE_INTERNAL "Use internal SQLite3x library" OFF)

IF(NOT SQLite3x_USE_INTERNAL)
  FIND_PACKAGE(SQLite3x)
ENDIF(NOT SQLite3x_USE_INTERNAL)

IF(NOT SQLite3x_FOUND OR SQLite3x_USE_INTERNAL)
  SET(SQLite3x_USE_INTERNAL 1)
  MESSAGE("Internal SQLite3x library will be used")
  SET(SQLite3x_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/sqlite3x")
  SET(SQLite3x_LIBRARIES "sqlite3x")
ELSE(NOT SQLite3x_FOUND OR SQLite3x_USE_INTERNAL)
  SET(SQLite3x_USE_INTERNAL 0)
ENDIF(NOT SQLite3x_FOUND OR SQLite3x_USE_INTERNAL)

INCLUDE_DIRECTORIES(${SQLite3x_INCLUDE_DIRS})

# XySSL
OPTION(XySSL_USE_INTERNAL "Use internal XySSL library" OFF)

IF(NOT XySSL_USE_INTERNAL)
  FIND_PACKAGE(XySSL)
ENDIF(NOT XySSL_USE_INTERNAL)

IF(NOT XySSL_FOUND OR XySSL_USE_INTERNAL)
  SET(XySSL_USE_INTERNAL 1)
  MESSAGE("Internal XySSL library will be used")
  SET(XySSL_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/xyssl")
  SET(XySSL_LIBRARIES "xyssl")
ELSE(NOT XySSL_FOUND OR XySSL_USE_INTERNAL)
  SET(XySSL_USE_INTERNAL 0)
ENDIF(NOT XySSL_FOUND OR XySSL_USE_INTERNAL)

INCLUDE_DIRECTORIES(${XySSL_INCLUDE_DIRS})


OPTION(SW_DEBUG "Build the project using debugging code" OFF)
IF(SW_DEBUG)
  ADD_DEFINITIONS(-DDEBUG)
ENDIF(SW_DEBUG)

OPTION(SW_TEST "Execute the tests" ON)
IF(SW_TEST)
  ENABLE_TESTING()
ENDIF(SW_TEST)
