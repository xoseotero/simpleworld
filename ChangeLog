Simple World 1.0b6:
	* Eggs can be eaten
	* Execute 1024 instructions per unit of time
	* Fix: Cancel a action when a interrupt is thrown if the interrupts are enabled
	* bugs: Add Coward bug
	* stdlib: Split stdlib files in one file for every function
	* stdlib: Add iterators to list, stack, queue and set
	* stdlib: Add a map (associative array) data structure
	* stdlib: Add a multimap data structure
	* worldlib: Add events management

Simple World 1.0b5 (2011/11/11):
	* Replace the cs register by the registers wc and ip.
	* Add the local register lr and make fp local.
	* Execute 16 CPU cycles by unit of time in the World.
	* Make configurable the duration of each kind of action.
	* Rot the food that is getting old.
	* Add new types of mutation: partial mutation, permutation and
	  duplication.
	* Update to database version 5.

Simple World 1.0b4 (2011/01/10):
	* Add spawns.
	* Add resources.
	* Add stats.
	* Update to database version 4.

Simple World 1.0b3 (2010/11/29):
	* Update to database version 3.
	* Major redesign of the database
	* Use SQLite3 directly instead of SQLite3x
	* Add bug herbivorous

Simple World 1.0b2 (2010/10/11):
	* Add register windows to the CPU
	* Rename the registers: The global registers begin with g and the local
	  ones with r (as before).
	* Add macros to SWL
	* Add ifdef/ifndef blocks to SWL

Simple World 1.0b1 (2010/03/02):
	* Add the stdlib (standard library of SWL)
	* Revert the change in Alpha 2 about the order of the parameters in
	  the store instructions.
	* Make Simple World portable between different architectures:
	  big/little endian, 32/64 bits and several UNIXes.
	* Add instructions to access a half word (16 bits) and a quarter word
	  (8 bits): loadh, loadhrr, loadhri, loadq, loadqrr, loadqri,
	  storeh, storehrr, storehri, storeq, storeqrr and storeqri.
	* Add instructions to extend the sign of a half word (16 bits) and
	  a quarter word (8 bits) to the whole word: signh and signq.
	* Rename instructions multl and multli to mult and multi.
	* Substract the size of the eggs to the fathers.
	* The CPU is less resistant to errors when treating with interrupts
	  that can't be handled.
	* The code of the old bugs can be mutated.
	* Added event "mutation" that is sent when the code of the bug is
	  mutated.
	* The bugs that don't do any action in the last cycles can be
	  penalized with the substraction of some energy.

Simple World 1.0a4 (2008/04/14):
	* Update to database version 2.
	* Add the field attack_multiplier (a multiplier for the energy of a
	  attack) to the Environment table.
	* Remove the unused field energy_developed from the Environment
	  table.
	* Add fp (frame pointer) register to help the programmer to use local
	  variables.
	* Convert the itp register to cs (control & status) register, which
	  has 16 bits for the itp.
	* Rename the stp register to sp.
	* Add the directive .ifndef to define a identificator only if if it
	  wasn't already defined.
	* Allow the definitions to refer to anything: a number, a instruction,
	  etc.
	* Make the jumps of the branch and function operations relative to
	  the pc.
	* Add instructions loadhi, callr, bz and bnz.
	* Remove innecesary instructions multlu, multlui, divu, divui, modu
	  and modui.
	* Change in mutations: replace the permutation of a word by the change
	  of a word.

Simple World 1.0a3 (2008/01/28):
	* Actions take 16 cycles to be finished.
	* Implementation of action "egg".
	* Possible mutations: addition of a random word, elimination of a word
	  and permutation of a word.

Simple World 1.0a2 (2007/12/10):
	* Optional use of OpennSSL if available
	* Change the store instructions to have the same parameters and
	  order than the load ones.
	* Send TimerInterrupt to the alive bugs each 64 cycles.
	* Bugs die if they do a action but they don't have energy enough.
	* Implementation of action "eat".
	* Implementation of action "attack".
	* Implementation of event "attack".

Simple World 1.0a1 (2007/11/12):
	* Implementation of action "nothing".
	* Implementation of action "myself".
	* Implementation of action "detect".
	* Implementation of action "information".
	* Implementation of action "move".
	* Implementation of action "turn".
